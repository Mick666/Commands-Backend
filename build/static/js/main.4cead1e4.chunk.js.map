{"version":3,"sources":["components/Togglable.js","components/CommandForms.js","components/Command.js","components/Notification.js","components/LoginForm.js","components/ContextForm.js","services/commands.js","services/login.js","App.js","index.js"],"names":["Togglable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","buttonLabel","className","children","displayName","CommandForm","createCommand","contextId","command","setCommand","description","setDescription","onSubmit","event","preventDefault","id","value","onChange","e","target","type","CommandTogglable","marginLeft","context","Command","commands","map","i","key","Commands","datakey","addCommand","console","log","newCommand","Notification","message","LoginForm","handleSubmit","handleUsernameChange","handlePasswordChange","username","password","ContextForm","createContext","setContext","baseUrl","token","getAll","a","axios","get","request","data","getOne","create","newObject","config","headers","Authorization","post","updatedContext","concat","put","setToken","newToken","deletePost","delete","response","login","credentials","App","setCommands","setUsername","setPassword","notification","setNotification","notificationType","setNotificationType","user","setUser","useEffect","loggedUserJSON","window","localStorage","getItem","JSON","parse","commandService","handleLogin","loginService","setItem","stringify","setTimeout","blogObject","then","returnedCommands","addContext","contextObject","returnedContexts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4cead1e4.chunk.js","sourcesContent":["import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    Togglable.propTypes = {\n        buttonLabel: PropTypes.string.isRequired\n    }\n\n    useImperativeHandle(ref, () => {\n        return {\n            toggleVisibility\n        }\n    })\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n            </div>\n            <div style={showWhenVisible} className='togglableContent'>\n                {props.children}\n                <button onClick={toggleVisibility}>Cancel</button>\n            </div>\n        </div>\n    )\n})\n\nTogglable.displayName = 'Togglable'\n\nexport default Togglable","import React, { useState } from 'react'\n\nfunction CommandForm ({ createCommand, contextId }) {\n    const [command, setCommand] = useState('')\n    const [description, setDescription] = useState('')\n\n    const addBlog = (event) => {\n        event.preventDefault()\n\n        createCommand({\n            command: command,\n            description: description\n        }, contextId)\n\n        setCommand('')\n        setDescription('')\n    }\n\n\n    return (\n        <div className='formDiv'>\n            <form onSubmit={addBlog}>\n      Command: <input\n                    id='commmand'\n                    value={command}\n                    onChange={(e) => setCommand(e.target.value)}\n                />\n                <br />\n      Description: <input\n                    id='description'\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                />\n                <br />\n                <button type=\"submit\">Save</button>\n            </form>\n        </div>\n    )\n}\n\nexport default CommandForm","import React, { useState } from 'react'\nimport Togglable from './Togglable'\nimport CommandForm from './CommandForms'\n\nconst CommandTogglable = (props) => {\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' , marginLeft: '10px' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <span style={{ marginLeft: '10px' }}> {props.context} </span>\n                <button onClick={toggleVisibility}>View</button>\n            </div>\n            <br></br>\n            <div style={showWhenVisible} className='revealedCommand'>\n                {props.context}\n                <button onClick={toggleVisibility}>Hide</button>\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\n{/* <div>{commands.map((command, i) => <p key={i} className='description'>{command.description}</p>)}</div> */}\nconst Command = ({ commands }) => {\n    return (\n        <div className='commandGrid'>\n            {commands.map((command, i) => <div key={i} className='commandGroup'>\n                <p className='command'>{command.command}</p>\n                <p className='description'>{command.description} </p>\n            </div>\n            )}\n\n        </div>\n    )\n}\n\nconst Commands = ({ context, commands, datakey, addCommand }) => {\n    console.log(commands)\n\n\n    const commandForm = (newCommand, contextId) => (\n        <Togglable buttonLabel='New command'>\n            <CommandForm createCommand={newCommand} contextId={contextId}/>\n        </Togglable>\n    )\n\n    return (\n        <div className='blogStyle' id={datakey}>\n            <CommandTogglable buttonLabel='View' context={context} className='togglableCommand'>\n                <div className='commandParent'>\n                    <Command commands={commands}/>\n                </div>\n                <div className='newCommand'>\n                    {commandForm(addCommand, datakey)}\n                </div>\n            </CommandTogglable>\n        </div>\n    )\n}\n\nexport default Commands","import React from 'react'\n\nconst Notification = ({ message, className }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst LoginForm = ({\n    handleSubmit,\n    handleUsernameChange,\n    handlePasswordChange,\n    username,\n    password\n}) => {\n\n    LoginForm.propTypes = {\n        handleSubmit: PropTypes.func.isRequired,\n        handleUsernameChange: PropTypes.func.isRequired,\n        handlePasswordChange: PropTypes.func.isRequired,\n        username: PropTypes.string.isRequired,\n        password: PropTypes.string.isRequired\n    }\n    return (\n        <div>\n            <h2>Login</h2>\n\n            <form onSubmit={handleSubmit}>\n                <div>\n                    username\n                    <input\n                        id='username'\n                        value={username}\n                        onChange={handleUsernameChange}\n                    />\n                </div>\n                <div>\n                    password\n                    <input\n                        id='password'\n                        type=\"password\"\n                        value={password}\n                        onChange={handlePasswordChange}\n                    />\n                </div>\n                <button type='submit' id='loginButton'>login</button>\n            </form>\n        </div>\n    )\n}\n\n\nexport default LoginForm","\nimport React, { useState } from 'react'\n\nconst ContextForm = ({ createContext }) => {\n    const [context, setContext] = useState('')\n\n    const addContext = (event) => {\n        event.preventDefault()\n\n        createContext({\n            context: context,\n        }, context)\n\n        setContext('')\n    }\n\n\n    return (\n        <div className='formDiv'>\n            <form onSubmit={addContext}>\n                Context: <input\n                    id='context'\n                    value={context}\n                    onChange={(e) => setContext(e.target.value)}\n                />\n                <br />\n                <button type=\"submit\">Save</button>\n            </form>\n        </div>\n    )\n}\n\nexport default ContextForm","import axios from 'axios'\nconst baseUrl = '/api/context'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n    const request = await axios.get(baseUrl)\n    return request.data\n}\n\nconst getOne = async (id) => {\n    const request = await axios.get(`${baseUrl}/${id}`)\n    return request.data\n}\n\nconst create = async (newObject, contextId) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    let context = await getOne(contextId)\n    let newCommand = await axios.post('/api/commands', newObject, config)\n    let updatedContext = {\n        ...context,\n        commands: context.commands.concat(newCommand.data.id)\n    }\n    await axios.put(`${baseUrl}/${contextId}`, updatedContext, config)\n    return getAll()\n}\n\nconst createContext = async (newObject) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    await axios.post(`${baseUrl}`, newObject, config)\n    return getAll()\n}\n\nconst deletePost = async (id) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n\n    const response = await axios.delete(`${baseUrl}/${id}`, config)\n    return response.data\n}\n\nexport default { getAll, setToken, create, createContext, deletePost }","import axios from 'axios'\nconst baseUrl = '/api/login'\n\nconst login = async credentials => {\n    const response = await axios.post(baseUrl, credentials)\n    return response.data\n}\n\nexport default { login }","import React, { useState, useEffect } from 'react'\nimport Commands from './components/Command'\nimport Notification from './components/Notification'\nimport Togglable from './components/Togglable'\nimport LoginForm from './components/LoginForm'\nimport ContextForm from './components/ContextForm'\nimport commandService from './services/commands'\nimport loginService from './services/login'\n\nconst App = () => {\n    const [commands, setCommands] = useState([])\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [notification, setNotification] = useState(null)\n    const [notificationType, setNotificationType] = useState('error')\n    const [user, setUser] = useState(null)\n\n    useEffect(() => {\n        let loggedUserJSON = window.localStorage.getItem('loggedBlogappUser')\n        if (loggedUserJSON) {\n            const user = JSON.parse(loggedUserJSON)\n            if (user === null) return\n            setUser(user)\n            console.log(user)\n            commandService.setToken(user.token)\n        }\n    }, [])\n\n    const handleLogin = async (event) => {\n        event.preventDefault()\n        try {\n            const user = await loginService.login({\n                username, password,\n            })\n\n            window.localStorage.setItem(\n                'loggedBlogappUser', JSON.stringify(user)\n            )\n            console.log(window.localStorage.getItem('loggedBlogappUser'))\n\n            commandService.setToken(user.token)\n            setUser(user)\n            console.log(user)\n            setUsername('')\n            setPassword('')\n        } catch (exception) {\n            setNotificationType('error')\n            setNotification('Wrong credentials')\n            setTimeout(() => {\n                setNotification(null)\n            }, 5000)\n        }\n    }\n\n    const handleLogOut = () => {\n        window.localStorage.setItem(\n            'loggedBlogappUser', null\n        )\n        setUser(null)\n    }\n\n    const addCommand = (blogObject, contextId) => {\n\n        commandService\n            .create(blogObject, contextId)\n            .then(returnedCommands => {\n                setCommands(returnedCommands)\n                setUser(user)\n                setNotificationType('notification')\n                setNotification('New command added')\n                setTimeout(() => {\n                    setNotification(null)\n                }, 5000)\n            })\n    }\n\n    const addContext = (contextObject) => {\n\n        commandService\n            .createContext(contextObject)\n            .then(returnedContexts => {\n                setCommands(returnedContexts)\n                setUser(user)\n                setNotificationType('notification')\n                setNotification('New section added')\n                setTimeout(() => {\n                    setNotification(null)\n                }, 5000)\n            })\n    }\n\n    const loginForm = () => (\n        <Togglable buttonLabel='login'>\n            <LoginForm\n                username={username}\n                password={password}\n                handleUsernameChange={({ target }) => setUsername(target.value)}\n                handlePasswordChange={({ target }) => setPassword(target.value)}\n                handleSubmit={handleLogin}\n            />\n        </Togglable>\n    )\n\n    const contextForm = () => (\n        <Togglable buttonLabel='Add new section'>\n            <ContextForm createContext={addContext} />\n        </Togglable>\n    )\n\n    useEffect(() => {\n        commandService.getAll().then(commands => {\n            console.log(commands)\n            setCommands(commands)\n        })\n    }, [])\n\n    return (\n        <div>\n            <Notification message={notification} className={notificationType}/>\n            {user === null ?\n                <div>\n                    <h2>Please log in</h2>\n                    {loginForm()}\n                </div>:\n                <div>\n                    <h2>Programming commands</h2>\n                    {`${user.username} logged in`} <button onClick={handleLogOut}>Log you out</button>\n                    <br></br>\n                    {contextForm()}\n                    <br></br>\n                    {commands.map(command =>\n                        <Commands\n                            key={command.id}\n                            datakey={command.id}\n                            context={command.context}\n                            commands={command.commands}\n                            addCommand={addCommand} />\n                    )}\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}