{"version":3,"sources":["components/Togglable.js","components/CommandForms.js","components/Command.js","components/Notification.js","components/ContextForm.js","services/commands.js","App.js","index.js"],"names":["Togglable","React","forwardRef","props","ref","useState","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","useImperativeHandle","style","onClick","buttonLabel","className","children","displayName","CommandForm","createCommand","contextId","command","setCommand","description","setDescription","onSubmit","event","preventDefault","id","value","onChange","e","target","type","CommandTogglable","marginLeft","context","Command","commands","map","i","key","Commands","datakey","addCommand","console","log","newCommand","Notification","message","ContextForm","createContext","setContext","baseUrl","token","getAll","a","axios","get","request","data","getOne","create","newObject","config","headers","Authorization","post","updatedContext","concat","put","setToken","newToken","deletePost","delete","response","App","setCommands","notification","setNotification","notificationType","setNotificationType","blogObject","commandService","then","returnedCommands","setTimeout","addContext","contextObject","returnedContexts","useEffect","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.38d61c81.chunk.js","sourcesContent":["import React, { useState, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\nconst Togglable = React.forwardRef((props, ref) => {\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    Togglable.propTypes = {\n        buttonLabel: PropTypes.string.isRequired\n    }\n\n    useImperativeHandle(ref, () => {\n        return {\n            toggleVisibility\n        }\n    })\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <button onClick={toggleVisibility}>{props.buttonLabel}</button>\n            </div>\n            <div style={showWhenVisible} className='togglableContent'>\n                {props.children}\n                <button onClick={toggleVisibility}>Cancel</button>\n            </div>\n        </div>\n    )\n})\n\nTogglable.displayName = 'Togglable'\n\nexport default Togglable","import React, { useState } from 'react'\n\nfunction CommandForm ({ createCommand, contextId }) {\n    const [command, setCommand] = useState('')\n    const [description, setDescription] = useState('')\n\n    const addBlog = (event) => {\n        event.preventDefault()\n\n        createCommand({\n            command: command,\n            description: description\n        }, contextId)\n\n        setCommand('')\n        setDescription('')\n    }\n\n\n    return (\n        <div className='formDiv'>\n            <form onSubmit={addBlog}>\n      Command: <input\n                    id='commmand'\n                    value={command}\n                    onChange={(e) => setCommand(e.target.value)}\n                />\n                <br />\n      Description: <input\n                    id='description'\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                />\n                <br />\n                <button type=\"submit\">Save</button>\n            </form>\n        </div>\n    )\n}\n\nexport default CommandForm","import React, { useState } from 'react'\nimport Togglable from './Togglable'\nimport CommandForm from './CommandForms'\n\nconst CommandTogglable = (props) => {\n    const [visible, setVisible] = useState(false)\n\n    const hideWhenVisible = { display: visible ? 'none' : '' }\n    const showWhenVisible = { display: visible ? '' : 'none' , marginLeft: '10px' }\n\n    const toggleVisibility = () => {\n        setVisible(!visible)\n    }\n\n    return (\n        <div>\n            <div style={hideWhenVisible}>\n                <span style={{ marginLeft: '10px' }}> {props.context} </span>\n                <button onClick={toggleVisibility}>View</button>\n            </div>\n            <br></br>\n            <div style={showWhenVisible} className='revealedCommand'>\n                {props.context}\n                <button onClick={toggleVisibility}>Hide</button>\n                {props.children}\n            </div>\n        </div>\n    )\n}\n\n{/* <div>{commands.map((command, i) => <p key={i} className='description'>{command.description}</p>)}</div> */}\nconst Command = ({ commands }) => {\n    return (\n        <div className='commandGrid'>\n            {commands.map((command, i) => <div key={i} className='commandGroup'>\n                <p className='command'>{command.command}</p>\n                <p className='description'>{command.description} </p>\n            </div>\n            )}\n\n        </div>\n    )\n}\n\nconst Commands = ({ context, commands, datakey, addCommand }) => {\n    console.log(commands)\n\n\n    const commandForm = (newCommand, contextId) => (\n        <Togglable buttonLabel='New command'>\n            <CommandForm createCommand={newCommand} contextId={contextId}/>\n        </Togglable>\n    )\n\n    return (\n        <div className='blogStyle' id={datakey}>\n            <CommandTogglable buttonLabel='View' context={context} className='togglableCommand'>\n                <div className='commandParent'>\n                    <Command commands={commands}/>\n                </div>\n                <div className='newCommand'>\n                    {commandForm(addCommand, datakey)}\n                </div>\n            </CommandTogglable>\n        </div>\n    )\n}\n\nexport default Commands","import React from 'react'\n\nconst Notification = ({ message, className }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={className}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","\nimport React, { useState } from 'react'\n\nconst ContextForm = ({ createContext }) => {\n    const [context, setContext] = useState('')\n\n    const addContext = (event) => {\n        event.preventDefault()\n\n        createContext({\n            context: context,\n        }, context)\n\n        setContext('')\n    }\n\n\n    return (\n        <div className='formDiv'>\n            <form onSubmit={addContext}>\n                Context: <input\n                    id='context'\n                    value={context}\n                    onChange={(e) => setContext(e.target.value)}\n                />\n                <br />\n                <button type=\"submit\">Save</button>\n            </form>\n        </div>\n    )\n}\n\nexport default ContextForm","import axios from 'axios'\nconst baseUrl = '/api/context'\n\nlet token = null\n\nconst setToken = newToken => {\n    token = `bearer ${newToken}`\n}\n\nconst getAll = async () => {\n    const request = await axios.get(baseUrl)\n    return request.data\n}\n\nconst getOne = async (id) => {\n    const request = await axios.get(`${baseUrl}/${id}`)\n    return request.data\n}\n\nconst create = async (newObject, contextId) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    let context = await getOne(contextId)\n    let newCommand = await axios.post('/api/commands', newObject, config)\n    let updatedContext = {\n        ...context,\n        commands: context.commands.concat(newCommand.data.id)\n    }\n    await axios.put(`${baseUrl}/${contextId}`, updatedContext, config)\n    return getAll()\n}\n\nconst createContext = async (newObject) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n    await axios.post(`${baseUrl}`, newObject, config)\n    return getAll()\n}\n\nconst deletePost = async (id) => {\n    const config = {\n        headers: { Authorization: token },\n    }\n\n    const response = await axios.delete(`${baseUrl}/${id}`, config)\n    return response.data\n}\n\nexport default { getAll, setToken, create, createContext, deletePost }","import React, { useState, useEffect } from 'react'\nimport Commands from './components/Command'\nimport Notification from './components/Notification'\nimport Togglable from './components/Togglable'\nimport LoginForm from './components/LoginForm'\nimport ContextForm from './components/ContextForm'\nimport commandService from './services/commands'\nimport loginService from './services/login'\n\nconst App = () => {\n    const [commands, setCommands] = useState([])\n    const [password, setPassword] = useState('')\n    const [notification, setNotification] = useState(null)\n    const [notificationType, setNotificationType] = useState('error')\n\n\n    const addCommand = (blogObject, contextId) => {\n\n        commandService\n            .create(blogObject, contextId)\n            .then(returnedCommands => {\n                setCommands(returnedCommands)\n                setNotificationType('notification')\n                setNotification('New command added')\n                setTimeout(() => {\n                    setNotification(null)\n                }, 5000)\n            })\n    }\n\n    const addContext = (contextObject) => {\n\n        commandService\n            .createContext(contextObject)\n            .then(returnedContexts => {\n                setCommands(returnedContexts)\n                setNotificationType('notification')\n                setNotification('New section added')\n                setTimeout(() => {\n                    setNotification(null)\n                }, 5000)\n            })\n    }\n\n\n    const contextForm = () => (\n        <Togglable buttonLabel='Add new section'>\n            <ContextForm createContext={addContext} />\n        </Togglable>\n    )\n\n    useEffect(() => {\n        commandService.getAll().then(commands => {\n            console.log(commands)\n            setCommands(commands)\n        })\n    }, [])\n\n    return (\n        <div>\n            <Notification message={notification} className={notificationType} />\n            <div>\n                <h2>Programming commands</h2>\n                <br></br>\n                {contextForm()}\n                <br></br>\n                {commands.map(command =>\n                    <Commands\n                        key={command.id}\n                        datakey={command.id}\n                        context={command.context}\n                        commands={command.commands}\n                        addCommand={addCommand} />\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}